<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/development/</link><description>Recent content in Development on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Thu, 21 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging (Developer side)</title><link>http://blog.casavian.eu/2015/05/21/logging-dev-side/</link><pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2015/05/21/logging-dev-side/</guid><description>I wrote lot of code in my life, and I discovered some patterns that can be useful to other people, so let&amp;rsquo;s share and discuss. More than design patterns, they are ways of applying classical Gang of Four Design Patterns &amp;nbsp; in specific contexts.
Today, I will start discussing writing logging and monitoring code, and you will see why I take these two together. The code examples use the C# language, but the ideas can be equally applied to C++, Java, Go or any other object oriented language with an interface feature that decouples implementation from definition.</description></item></channel></rss>