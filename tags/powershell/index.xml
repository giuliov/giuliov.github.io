<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Powershell on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/powershell/</link><description>Recent content in Powershell on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Thu, 06 Nov 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>TfsSecurity wrapper</title><link>http://blog.casavian.eu/2014/11/06/tfssecurity/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/11/06/tfssecurity/</guid><description>TfsSecurity &amp;nbsp; is an ugly but effective tool. I said ugly because the scope parameter is hard to get: you need to ask the database or go through the API.
This latter is a palatable option in PowerShell, so here is a sample script to create a Group in an existing Team Project.
[CmdletBinding()] param ( [Parameter(Mandatory=$true, Position=0)] [uri] $collection, [Parameter(Mandatory=$true, Position=1)] [string] $project, [Parameter(Mandatory=$true, Position=2)] [string] $groupName, [Parameter(Mandatory=$false, Position=3)] [string] $groupDescription = &amp;quot;&amp;quot; ) $ErrorActionPreference = 'Stop' Set-StrictMode -Version Latest $TFSSecurity = &amp;quot;${env:ProgramFiles(x86)}\Microsoft Visual Studio 12.</description></item><item><title>Automating TeamProject creation (Git included)</title><link>http://blog.casavian.eu/2014/10/28/automating-project-creation/</link><pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/10/28/automating-project-creation/</guid><description>I get frequent request from my teams to create a new project, therefore I automated the task with a PowerShell script.
PowerShell Creation scripts The script algorithm goes like this:
Load the definition for the new project Validate the definition by checking the user accounts invoke the creation tool with the /validate option Creates the project using TFPT &amp;nbsp; Creates an Organizational Unit in Active Directory where placing the groups Creates the AD groups and add the user account Creates corresponding TFS groups Checks that user account belongs to one of the three AD groups that control the TFS Access Level â€” best known as Licensing I will spare you the code here as it is more than 100 lines long.</description></item><item><title>TFS in PowerShell</title><link>http://blog.casavian.eu/2014/09/19/tfs-in-powershell/</link><pubDate>Fri, 19 Sep 2014 17:07:59 +0000</pubDate><guid>http://blog.casavian.eu/2014/09/19/tfs-in-powershell/</guid><description>I am re-factoring my PowerShell administration scripts and noticed many useful snippets to share, let&amp;rsquo;s start.
Where is Team Foundation Server installed? Scenario: your script runs TFSSecurity.exe; sadly this tool is not in the path and, worse, the path changes from one Team Foundation Server version to another.
The following function returns the Team Foundation Server path, e.g. C:\Program Files\Microsoft Team Foundation Server 12.0.
function Get-TeamFoundationServerInstallPath { if (Test-Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer&amp;quot;) { $highestTFSversion = &amp;quot;{0:N1}&amp;quot; -f ( Get-ChildItem -Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer&amp;quot; | Split-Path -Leaf | foreach { $_ -as [double] } | sort -Descending | select -First 1) $tfsPath = Get-ItemProperty -Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\$highestTFSversion&amp;quot; -Name InstallPath -ErrorAction SilentlyContinue if ($tfsPath) { $tfsPath.</description></item></channel></rss>