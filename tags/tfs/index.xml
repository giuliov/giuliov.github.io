<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TFS on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/tfs/</link><description>Recent content in TFS on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Fri, 30 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/tfs/index.xml" rel="self" type="application/rss+xml"/><item><title>Remainder: open those ports for TFS</title><link>http://blog.casavian.eu/post/2017-06-reminder-to-self/reminder-to-self/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/post/2017-06-reminder-to-self/reminder-to-self/</guid><description>To work on TFS Aggregator I use a number of virtual machines running different versions of Team Foundation Server. I also install the remote debugging tools (more info on remote debugging &amp;nbsp; ) inside the VM and I am good to go, except for a little tweak that I always forget. So I am writing about here as a reminder.
In my configuration the Virtual Machine in Hyper-V sees the network as Public while TFS setup, by default, opens the Firewall ports only on Private networks.</description></item><item><title>Mixing TFVC and Git</title><link>http://blog.casavian.eu/post/2017-03-mixing-tfvc-and-git/mixing-tfvc-and-git/</link><pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/post/2017-03-mixing-tfvc-and-git/mixing-tfvc-and-git/</guid><description>It all started because I needed using files coming from a Git repository and additional files stored in classic Team Foundation Version Control (TFVC), all toghether in the same build.
The Options You have three options: the REST API, the tf.exe vc command or &amp;hellip; we will see.
Option 1 â€“ REST API My first attempt relied on a Powershell script to download the files from TFVC using REST API. It worked but performance is not that great as you have to download a file at a time in a loop.</description></item><item><title>Remainder: open those ports</title><link>http://blog.casavian.eu/draft/2017-01-reminder-to-self/reminder-to-self/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/draft/2017-01-reminder-to-self/reminder-to-self/</guid><description>VMs sees the network as Public and by default TFS setup opens the Firewall only on Private networks.</description></item><item><title>TfsSecurity wrapper</title><link>http://blog.casavian.eu/2014/11/06/tfssecurity/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/11/06/tfssecurity/</guid><description>TfsSecurity &amp;nbsp; is an ugly but effective tool. I said ugly because the scope parameter is hard to get: you need to ask the database or go through the API.
This latter is a palatable option in PowerShell, so here is a sample script to create a Group in an existing Team Project.
[CmdletBinding()] param ( [Parameter(Mandatory=$true, Position=0)] [uri] $collection, [Parameter(Mandatory=$true, Position=1)] [string] $project, [Parameter(Mandatory=$true, Position=2)] [string] $groupName, [Parameter(Mandatory=$false, Position=3)] [string] $groupDescription = &amp;quot;&amp;quot; ) $ErrorActionPreference = 'Stop' Set-StrictMode -Version Latest $TFSSecurity = &amp;quot;${env:ProgramFiles(x86)}\Microsoft Visual Studio 12.</description></item><item><title>TFS in PowerShell</title><link>http://blog.casavian.eu/2014/09/19/tfs-in-powershell/</link><pubDate>Fri, 19 Sep 2014 17:07:59 +0000</pubDate><guid>http://blog.casavian.eu/2014/09/19/tfs-in-powershell/</guid><description>I am re-factoring my PowerShell administration scripts and noticed many useful snippets to share, let&amp;rsquo;s start.
Where is Team Foundation Server installed? Scenario: your script runs TFSSecurity.exe; sadly this tool is not in the path and, worse, the path changes from one Team Foundation Server version to another.
The following function returns the Team Foundation Server path, e.g. C:\Program Files\Microsoft Team Foundation Server 12.0.
function Get-TeamFoundationServerInstallPath { if (Test-Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer&amp;quot;) { $highestTFSversion = &amp;quot;{0:N1}&amp;quot; -f ( Get-ChildItem -Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer&amp;quot; | Split-Path -Leaf | foreach { $_ -as [double] } | sort -Descending | select -First 1) $tfsPath = Get-ItemProperty -Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\$highestTFSversion&amp;quot; -Name InstallPath -ErrorAction SilentlyContinue if ($tfsPath) { $tfsPath.</description></item></channel></rss>