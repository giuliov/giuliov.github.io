<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Drop on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/drop/</link><description>Recent content in Drop on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Sat, 28 Jun 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/drop/index.xml" rel="self" type="application/rss+xml"/><item><title>Why do you copy all those binaries?</title><link>http://blog.casavian.eu/2014/06/28/why-do-you-copy-all-those-binaries/</link><pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/06/28/why-do-you-copy-all-those-binaries/</guid><description>Some days ago I replied to StackOverflow question &amp;ldquo;TFS 2010 Build, constant drop location, random access issue &amp;nbsp; &amp;quot;, and it reminded of an approach used in the past that revealed being effective.
The scenario TFS Build creates a new folder in the Drop share at each new Build, no matter if it was successful or completely failed. The folder name is taken from the build identifier generated during the build run, e.</description></item></channel></rss>