<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MSBuild on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/msbuild/</link><description>Recent content in MSBuild on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Mon, 28 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/msbuild/index.xml" rel="self" type="application/rss+xml"/><item><title>Increment Version for Changed Assemblies only – Third Part</title><link>http://blog.casavian.eu/2014/04/28/increment-version-for-changed-assemblies-only-third-part/</link><pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/28/increment-version-for-changed-assemblies-only-third-part/</guid><description>This is the third and last installment of the series: in the First post we examined the basics of extending the MSBuild / Visual Studio process, and in the Second part how to extend the Team Foundation Server Build, so that the minimum set of assembly is recompiled and gets the version updated. The limit of the latter solution is in the version number appearing in the assemblies: they have no relation with build identifiers.</description></item><item><title>Increment Version for Changed Assemblies only – Second Part</title><link>http://blog.casavian.eu/2014/04/25/increment-version-for-changed-assemblies-only-second-part/</link><pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/25/increment-version-for-changed-assemblies-only-second-part/</guid><description>In the previous post we have seen how to hook into the MSBuild process, common to both the Visual Studio and the Team Foundation Server build processes. Now we examine how to leverage the previous achievement in the context of TFS Build.
We will examine the solution in a top-down fashion: first the build definition, than the build template, finally the MSBuild target file. The only drawback, is the lack of correlation between the version number appearing in the output assemblies with the Team Build Identifier; this will be correct with the next post .</description></item><item><title>Increment Version for Changed Assemblies only – First part</title><link>http://blog.casavian.eu/2014/04/23/increment-version-for-changed-assemblies-only-first-part/</link><pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/23/increment-version-for-changed-assemblies-only-first-part/</guid><description>This is something I did in the past (Build incrementale e numeri di versione [ITA] &amp;nbsp; ), and it came out recently on Stack Overflow &amp;nbsp; , so I will take the time to describe how to do this in details.
The solution is design around MSBuild: leveraging some extension points, you trigger the custom code that increments some version number in AssemblyInfo.cs, subject to the same conditions that triggers code compiling.</description></item></channel></rss>