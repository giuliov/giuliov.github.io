<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/docker/</link><description>Recent content in Docker on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Fri, 13 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Meta-pipelines - Part 4 - Deploy and Run</title><link>http://blog.casavian.eu/2019/pipeline-your-pipeline/5-deploy_images/</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/pipeline-your-pipeline/5-deploy_images/</guid><description>In the previous instalment we built custom Docker images for Azure Pipelines/TFS Agents. In this post, we will explore the lifecycle of Docker containers running such images.
Container Deploy Pipeline This pipeline is more complex than the previous requiring 4 actions:
checking if the agent (rectius the container running the agent) is running If so, stop and remove the container Pulling the image from the selected Docker Registry Starting the container with the proper parameters.</description></item><item><title>Meta-pipelines - Part 3 - Build and Registry</title><link>http://blog.casavian.eu/2019/pipeline-your-pipeline/4-build_images/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/pipeline-your-pipeline/4-build_images/</guid><description>In the previous instalments we examined a possible Dockerfile for an Azure Pipelines/TFS Agent. In this post, we will explore the pipeline that can automatically build such custom agent images.
Docker Registry To automate properly we need a Docker Registry where storing the Docker images we build. There are many advantages in using a registry, in our scenario it enables:
pulling an image version built years ago distribution of images to multiple hosts caching locally base images, allowing air gap builds For the purpose of this series we will use Azure Container Registry (ACR for short), but there are many options; for example I used successfully ProGet &amp;nbsp; .</description></item><item><title>Meta-pipelines - Part 2 - Dockerize the agent</title><link>http://blog.casavian.eu/2019/pipeline-your-pipeline/3-dockerfile/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/pipeline-your-pipeline/3-dockerfile/</guid><description>In the previous instalment we setup a couple of machines to run Docker and host docker containers. In this post, we will explore the structure of a Dockerfile for Azure Pipelines/TFS Agent.
There is a notable difference between Azure DevOps Service and Server in terms of handling agent updates. The first part of this article can be used in air-gapped environments.
If you need a primer on Docker there is plenty of resources, from the excellent The Docker Book &amp;nbsp; to the official documentation &amp;nbsp; , Pluralsight courses, etc.</description></item></channel></rss>