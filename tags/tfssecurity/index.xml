<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TfsSecurity on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/tags/tfssecurity/</link><description>Recent content in TfsSecurity on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Thu, 06 Nov 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/tags/tfssecurity/index.xml" rel="self" type="application/rss+xml"/><item><title>TfsSecurity wrapper</title><link>http://blog.casavian.eu/2014/11/06/tfssecurity/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/11/06/tfssecurity/</guid><description>TfsSecurity &amp;nbsp; is an ugly but effective tool. I said ugly because the scope parameter is hard to get: you need to ask the database or go through the API.
This latter is a palatable option in PowerShell, so here is a sample script to create a Group in an existing Team Project.
[CmdletBinding()] param ( [Parameter(Mandatory=$true, Position=0)] [uri] $collection, [Parameter(Mandatory=$true, Position=1)] [string] $project, [Parameter(Mandatory=$true, Position=2)] [string] $groupName, [Parameter(Mandatory=$false, Position=3)] [string] $groupDescription = &amp;quot;&amp;quot; ) $ErrorActionPreference = 'Stop' Set-StrictMode -Version Latest $TFSSecurity = &amp;quot;${env:ProgramFiles(x86)}\Microsoft Visual Studio 12.</description></item></channel></rss>