<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Giulio Vian's Blog!</title><link>http://blog.casavian.eu/post/</link><description>Recent content in Posts on Giulio Vian's Blog!</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License</copyright><lastBuildDate>Sat, 25 Apr 2020 12:00:00 +0000</lastBuildDate><atom:link href="http://blog.casavian.eu/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog updated: Hugo &amp; GitHub Actions</title><link>http://blog.casavian.eu/2020/04/25/blog-updated-hugo-github-actions/</link><pubDate>Sat, 25 Apr 2020 12:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2020/04/25/blog-updated-hugo-github-actions/</guid><description>I wrote a while ago about Automating Hugo to publish a blog. In that post, I used Azure Pipelines (well, they had a different name at that time).
Today, after three years, I revised the solution and I am amazed by Hugo &amp;nbsp; progress. Many of my customisations and hacks I implemented are gone: Hugo batteries included philosophy is a true thing.
In addition to using the most recent version &amp;ndash; 0.</description></item><item><title>Using GitVersion in GitHub Actions beta</title><link>http://blog.casavian.eu/2019/09/23/using-gitversion-in-github-actions-beta/</link><pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/09/23/using-gitversion-in-github-actions-beta/</guid><description>I was lucky to enter the GitHub Actions beta program so I wondered about the best way to test it. Finally, I decided to port Aggregator CLI &amp;nbsp; build scripts to GitHub Actions.
A critical step of those scripts is to run GitVersion &amp;nbsp; to generate the version for Aggregator. GitVersion, in the words of its authors, &amp;ldquo;looks at your git history and works out the semantic version of the commit being built.</description></item><item><title>Meta-pipelines - Part 5 - Automating the Host Environment</title><link>http://blog.casavian.eu/2019/09/20/meta-pipelines-part-5-automating-the-host-environment/</link><pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/09/20/meta-pipelines-part-5-automating-the-host-environment/</guid><description>Looking back at the previous parts of this series, we have been able to manually setup two hosts, a Windows one and a Linux one, and a simple pipeline to automatically deploy new Azure DevOps/TFS Agents in Docker containers on such hosts and even update them.
In this post we will look how to provision the hosts themselves. For this purpose we will use Terraform and invoke it from Azure Pipelines so we can automate host creation in Azure.</description></item><item><title>Meta-pipelines - Part 4 - Deploy and Run</title><link>http://blog.casavian.eu/2019/09/13/meta-pipelines-part-4-deploy-and-run/</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/09/13/meta-pipelines-part-4-deploy-and-run/</guid><description>In the previous instalment we built custom Docker images for Azure Pipelines/TFS Agents. In this post, we will explore the lifecycle of Docker containers running such images.
Container Deploy Pipeline This pipeline is more complex than the previous requiring 4 actions:
checking if the agent (rectius the container running the agent) is running If so, stop and remove the container Pulling the image from the selected Docker Registry Starting the container with the proper parameters.</description></item><item><title>Meta-pipelines - Part 3 - Build and Registry</title><link>http://blog.casavian.eu/2019/09/06/meta-pipelines-part-3-build-and-registry/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/09/06/meta-pipelines-part-3-build-and-registry/</guid><description>In the previous instalments we examined a possible Dockerfile for an Azure Pipelines/TFS Agent. In this post, we will explore the pipeline that can automatically build such custom agent images.
Docker Registry To automate properly we need a Docker Registry where storing the Docker images we build. There are many advantages in using a registry, in our scenario it enables:
pulling an image version built years ago distribution of images to multiple hosts caching locally base images, allowing air gap builds For the purpose of this series we will use Azure Container Registry (ACR for short), but there are many options; for example I used successfully ProGet &amp;nbsp; .</description></item><item><title>Meta-pipelines - Part 2 - Dockerize the agent</title><link>http://blog.casavian.eu/2019/08/30/meta-pipelines-part-2-dockerize-the-agent/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/08/30/meta-pipelines-part-2-dockerize-the-agent/</guid><description>In the previous instalment we setup a couple of machines to run Docker and host docker containers. In this post, we will explore the structure of a Dockerfile for Azure Pipelines/TFS Agent.
There is a notable difference between Azure DevOps Service and Server in terms of handling agent updates. The first part of this article can be used in air-gapped environments.
If you need a primer on Docker there is plenty of resources, from the excellent The Docker Book &amp;nbsp; to the official documentation &amp;nbsp; , Pluralsight courses, etc.</description></item><item><title>Meta-pipelines - Part 1 - Docker Hosts</title><link>http://blog.casavian.eu/2019/08/23/meta-pipelines-part-1-docker-hosts/</link><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/08/23/meta-pipelines-part-1-docker-hosts/</guid><description>The first step will be to setup an environment where we can run Docker and is the topic for this instalment.
We need at least two kinds of hosts: a Windows and a Linux machines. Simple reason: you cannot run Windows containers on a Linux host, also running Linux containers on a Windows machine is inefficient (they truly run inside a virtual machine). Windows support for Docker is tied to specific kernel versions.</description></item><item><title>Meta-pipelines - Introduction</title><link>http://blog.casavian.eu/2019/08/19/meta-pipelines-introduction/</link><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2019/08/19/meta-pipelines-introduction/</guid><description>Welcome. This series of articles will go in details of automating Azure Pipelines infrastructure itself. The text is accompanied by a source code repository &amp;nbsp; publicly available on GitHub.
Scenario and Problems Imagine yourself in the scenario of an independent team responsible of maintaining its own build pipeline. Typical solutions are:
Grab a leftover desktop or server machine Ask the IT department for a virtual machine Buy a VM in the cloud Use the standard hosted agents provided by Azure Pipelines These solutions share some common problems.</description></item><item><title>Remainder: open those ports for TFS</title><link>http://blog.casavian.eu/2017/06/30/remainder-open-those-ports-for-tfs/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2017/06/30/remainder-open-those-ports-for-tfs/</guid><description>To work on TFS Aggregator I use a number of virtual machines running different versions of Team Foundation Server. I also install the remote debugging tools (more info on remote debugging &amp;nbsp; ) inside the VM and I am good to go, except for a little tweak that I always forget. So I am writing about here as a reminder.
In my configuration the Virtual Machine in Hyper-V sees the network as Public while TFS setup, by default, opens the Firewall ports only on Private networks.</description></item><item><title>Automate publishing documentation using Hugo and GitHub pages</title><link>http://blog.casavian.eu/2017/03/07/automate-publishing-documentation-using-hugo-and-github-pages/</link><pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2017/03/07/automate-publishing-documentation-using-hugo-and-github-pages/</guid><description>Many of you knows my work on TFS Aggregator &amp;nbsp; . Since the beginning we opted for Markdown &amp;nbsp; as the format for the project documentation, at the beginning they were some files in a doc folder, then I moved the content to the project&amp;rsquo;s GitHub Wiki, today I use the same files to generate the GitHub pages at https://tfsaggregator.github.io/intro/.
In this post I will describe how this latter step works in detail to publish our open source project&amp;rsquo;s documentation.</description></item><item><title>Mixing TFVC and Git</title><link>http://blog.casavian.eu/2017/03/04/mixing-tfvc-and-git/</link><pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2017/03/04/mixing-tfvc-and-git/</guid><description>It all started because I needed using files coming from a Git repository and additional files stored in classic Team Foundation Version Control (TFVC), all toghether in the same build.
The Options You have three options: the REST API, the tf.exe vc command or &amp;hellip; we will see.
Option 1 – REST API My first attempt relied on a Powershell script to download the files from TFVC using REST API. It worked but performance is not that great as you have to download a file at a time in a loop.</description></item><item><title>A new look for 2016 blog</title><link>http://blog.casavian.eu/2015/11/29/a-new-look-for-2016-blog/</link><pubDate>Sun, 29 Nov 2015 20:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2015/11/29/a-new-look-for-2016-blog/</guid><description>I did it again and changed my blog engine to Hugo &amp;nbsp; ; as a consequence you will find some small change in style and navigation.
The first and foremost reason is the complexity induced by Jekyll &amp;nbsp; . It requires some GB (who says that Visual Studio is big?) and many vodoo hacks to work on Windows. I ended having a Linux VM running Jekyll and some additional steps going from the Markdown file to a published post.</description></item><item><title>Annoyed by TF276000 error?</title><link>http://blog.casavian.eu/2015/05/28/annoyed-by-tf276000/</link><pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2015/05/28/annoyed-by-tf276000/</guid><description>Annoyed by this error?
[Full Analysis Database Sync]:
TF276000: The current Analysis Database Sync job has exited without making any changes. Either another Analysis Database Sync job is already in progress, or the Analysis Database Sync job cannot run because an Optimize Databases job is running. The next Analysis Database Sync job will start at its scheduled time.
It shows up in the Cube Status report of the Administrative Report Pack &amp;nbsp; , and you are using them, aren&amp;rsquo;t you?</description></item><item><title>Logging (Developer side)</title><link>http://blog.casavian.eu/2015/05/21/logging-dev-side/</link><pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2015/05/21/logging-dev-side/</guid><description>I wrote lot of code in my life, and I discovered some patterns that can be useful to other people, so let&amp;rsquo;s share and discuss. More than design patterns, they are ways of applying classical Gang of Four Design Patterns &amp;nbsp; in specific contexts.
Today, I will start discussing writing logging and monitoring code, and you will see why I take these two together. The code examples use the C# language, but the ideas can be equally applied to C++, Java, Go or any other object oriented language with an interface feature that decouples implementation from definition.</description></item><item><title>Command line tool to manage Git repositories in TFS</title><link>http://blog.casavian.eu/2015/04/24/git-repo-management/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2015/04/24/git-repo-management/</guid><description>In a previous post , I quickly touched on TfsGitAdmin.
I published the code on GitHub at https://github.com/giuliov/TfsGitAdmin and added new features to it:
Adds an additional Git repository to a Team Project Creates the default Git repository on a Team Project that was created without version control Deletes an existing Git repository List all Git repositories in a Team Project Renames an existing Git repository Some Usage Examples TfsGitAdmin add -s http://localhost:8080/tfs -c DefaultCollection -p MySampleProject -r MyAdditionalGitRepository Adds an additional Git repository to Team Project MySampleProject.</description></item><item><title>Q &amp; A on Agile Portfolio Management</title><link>http://blog.casavian.eu/2015/04/22/qa-agile-portfolio-management/</link><pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2015/04/22/qa-agile-portfolio-management/</guid><description>A while ago I held and internal session on Agile Portfolio Management. I found some questions interesting, so I share my answers here.
Q: How to measure the improvement of an agile Team, which indicator to use? A: There are three useful values to monitor. One is the Team&amp;rsquo;s velocity: it should go up sprint after sprint, suggesting that the Team gets more and more efficient; the initial sprints are usually irregular.</description></item><item><title>Why the second node is not showing in the Console?</title><link>http://blog.casavian.eu/2014/11/11/second-node-not-showing-in-console/</link><pubDate>Tue, 11 Nov 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/11/11/second-node-not-showing-in-console/</guid><description>A while ago, I was helping my US colleagues migrating their TFS to 2013. It was a serious work, as they moved from a TFS 2010 SP1 to 2013 Update 3.
They have everything in one Collection, which makes a Migration Upgrade &amp;nbsp; (or attach upgrade) feasible.
We designed a new infrastructure with Disaster Recovery in mind. In the old configuration they just mirrored the databases at the storage level, in the new one, SQL Always On manages the replica.</description></item><item><title>TfsSecurity wrapper</title><link>http://blog.casavian.eu/2014/11/06/tfssecurity/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/11/06/tfssecurity/</guid><description>TfsSecurity &amp;nbsp; is an ugly but effective tool. I said ugly because the scope parameter is hard to get: you need to ask the database or go through the API.
This latter is a palatable option in PowerShell, so here is a sample script to create a Group in an existing Team Project.
[CmdletBinding()] param ( [Parameter(Mandatory=$true, Position=0)] [uri] $collection, [Parameter(Mandatory=$true, Position=1)] [string] $project, [Parameter(Mandatory=$true, Position=2)] [string] $groupName, [Parameter(Mandatory=$false, Position=3)] [string] $groupDescription = &amp;quot;&amp;quot; ) $ErrorActionPreference = 'Stop' Set-StrictMode -Version Latest $TFSSecurity = &amp;quot;${env:ProgramFiles(x86)}\Microsoft Visual Studio 12.</description></item><item><title>Automating TeamProject creation (Git included)</title><link>http://blog.casavian.eu/2014/10/28/automating-project-creation/</link><pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/10/28/automating-project-creation/</guid><description>I get frequent request from my teams to create a new project, therefore I automated the task with a PowerShell script.
PowerShell Creation scripts The script algorithm goes like this:
Load the definition for the new project Validate the definition by checking the user accounts invoke the creation tool with the /validate option Creates the project using TFPT &amp;nbsp; Creates an Organizational Unit in Active Directory where placing the groups Creates the AD groups and add the user account Creates corresponding TFS groups Checks that user account belongs to one of the three AD groups that control the TFS Access Level — best known as Licensing I will spare you the code here as it is more than 100 lines long.</description></item><item><title>Do not leave your Collections off-line!</title><link>http://blog.casavian.eu/2014/10/27/do-not-leave-your-collections-off-line/</link><pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/10/27/do-not-leave-your-collections-off-line/</guid><description>We have some unused collections and this seemed harmless, until I started accumulating problems.
Best Practices Analyzer (BPA) The first issue happened with BPA. It refuses starting a scan, if it sees off-line collections. Not a big deal, as I put them online just for this.
Lab Management I encountered a more serious issue with Lab Management configuration, so much that I opened a case with Microsoft Support.
I tried to change the Virtual Machine Manager server used by TFS, and I received an unpleasant HostShutdownException error.</description></item><item><title>New look, but there is more</title><link>http://blog.casavian.eu/2014/10/18/new-blog-look/</link><pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/10/18/new-blog-look/</guid><description>What you see today is not a simple change in style, but a complete migration from WordPress to a static site.
The main driver for this decision is the disliked for LiveWriter or in-browser editor and conversely my growing reliance on Markdown. I tried using WordPress plugins for MD, like Mytory Markdown &amp;nbsp; , but the result was never satisfactory, as they do not support Github syntax.
So I moved from a basic AWS machine (see How I set-up this blog ), to a static web site on Azure.</description></item><item><title>My daughter is trying to convert me</title><link>http://blog.casavian.eu/2014/09/26/my-daughter-is-trying-to-convert-me/</link><pubDate>Fri, 26 Sep 2014 19:53:35 +0000</pubDate><guid>http://blog.casavian.eu/2014/09/26/my-daughter-is-trying-to-convert-me/</guid><description>To classical music
and I was lucky: 40 euros per person and two hours drive.</description></item><item><title>TFS in PowerShell</title><link>http://blog.casavian.eu/2014/09/19/tfs-in-powershell/</link><pubDate>Fri, 19 Sep 2014 17:07:59 +0000</pubDate><guid>http://blog.casavian.eu/2014/09/19/tfs-in-powershell/</guid><description>I am re-factoring my PowerShell administration scripts and noticed many useful snippets to share, let&amp;rsquo;s start.
Where is Team Foundation Server installed? Scenario: your script runs TFSSecurity.exe; sadly this tool is not in the path and, worse, the path changes from one Team Foundation Server version to another.
The following function returns the Team Foundation Server path, e.g. C:\Program Files\Microsoft Team Foundation Server 12.0.
function Get-TeamFoundationServerInstallPath { if (Test-Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer&amp;quot;) { $highestTFSversion = &amp;quot;{0:N1}&amp;quot; -f ( Get-ChildItem -Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer&amp;quot; | Split-Path -Leaf | foreach { $_ -as [double] } | sort -Descending | select -First 1) $tfsPath = Get-ItemProperty -Path &amp;quot;HKLM:\SOFTWARE\Microsoft\TeamFoundationServer\$highestTFSversion&amp;quot; -Name InstallPath -ErrorAction SilentlyContinue if ($tfsPath) { $tfsPath.</description></item><item><title>Team field fix after update 3</title><link>http://blog.casavian.eu/2014/09/18/team-field-fix-after-update-3/</link><pubDate>Thu, 18 Sep 2014 21:03:17 +0000</pubDate><guid>http://blog.casavian.eu/2014/09/18/team-field-fix-after-update-3/</guid><description>We are testing the upgrade to TFS 2013 Update 3. At first sight everything seemed working, but one reviewer, opening the Work tab to see the Backlog for her Team Project, saw this nasty TF400917 error
I realized that, a while ago, around 2012.4, we have applied Customize a team project to support team fields &amp;nbsp; to that Project, and Custom.Team is our custom team field.
What does Update 3?</description></item><item><title>Why do you copy all those binaries?</title><link>http://blog.casavian.eu/2014/06/28/why-do-you-copy-all-those-binaries/</link><pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/06/28/why-do-you-copy-all-those-binaries/</guid><description>Some days ago I replied to StackOverflow question &amp;ldquo;TFS 2010 Build, constant drop location, random access issue &amp;nbsp; &amp;quot;, and it reminded of an approach used in the past that revealed being effective.
The scenario TFS Build creates a new folder in the Drop share at each new Build, no matter if it was successful or completely failed. The folder name is taken from the build identifier generated during the build run, e.</description></item><item><title>Third upgrade in a row</title><link>http://blog.casavian.eu/2014/05/18/third-upgrade-in-a-row/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/05/18/third-upgrade-in-a-row/</guid><description>Last week I upgraded our TFS infrastructure from 2013 to 2013 Update 2. It was the third upgrade since I started working in this company, which means 3 upgrades in 4 months! This says something about our Development Directors which want the latest features because they need them; it is also a consequence of Product Group&amp;rsquo;s innovation pace. Call me lucky.
The DevOps movement keeps repeating: the harder to deploy, the more often you have to do it.</description></item><item><title>A small nice touch from TFS 2013.2</title><link>http://blog.casavian.eu/2014/05/04/a-small-nice-touch-from-tfs-2013-2/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/05/04/a-small-nice-touch-from-tfs-2013-2/</guid><description>No more fussing around to move the cache folder: TFS 2013 Update 2 add a nice link at your fingertips on the Administration Console.
Now, I just need to find how to script this setting…</description></item><item><title>Increment Version for Changed Assemblies only – Third Part</title><link>http://blog.casavian.eu/2014/04/28/increment-version-for-changed-assemblies-only-third-part/</link><pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/28/increment-version-for-changed-assemblies-only-third-part/</guid><description>This is the third and last installment of the series: in the First post we examined the basics of extending the MSBuild / Visual Studio process, and in the Second part how to extend the Team Foundation Server Build, so that the minimum set of assembly is recompiled and gets the version updated. The limit of the latter solution is in the version number appearing in the assemblies: they have no relation with build identifiers.</description></item><item><title>Increment Version for Changed Assemblies only – Second Part</title><link>http://blog.casavian.eu/2014/04/25/increment-version-for-changed-assemblies-only-second-part/</link><pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/25/increment-version-for-changed-assemblies-only-second-part/</guid><description>In the previous post we have seen how to hook into the MSBuild process, common to both the Visual Studio and the Team Foundation Server build processes. Now we examine how to leverage the previous achievement in the context of TFS Build.
We will examine the solution in a top-down fashion: first the build definition, than the build template, finally the MSBuild target file. The only drawback, is the lack of correlation between the version number appearing in the output assemblies with the Team Build Identifier; this will be correct with the next post .</description></item><item><title>Increment Version for Changed Assemblies only – First part</title><link>http://blog.casavian.eu/2014/04/23/increment-version-for-changed-assemblies-only-first-part/</link><pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/23/increment-version-for-changed-assemblies-only-first-part/</guid><description>This is something I did in the past (Build incrementale e numeri di versione [ITA] &amp;nbsp; ), and it came out recently on Stack Overflow &amp;nbsp; , so I will take the time to describe how to do this in details.
The solution is design around MSBuild: leveraging some extension points, you trigger the custom code that increments some version number in AssemblyInfo.cs, subject to the same conditions that triggers code compiling.</description></item><item><title>Remove TFS Feature</title><link>http://blog.casavian.eu/2014/04/09/remove-tfs-feature/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/09/remove-tfs-feature/</guid><description>Are you shuffling around the machines of your TFS environment? Repurposing them? Changing the roles?
Sometimes you need to remove some configured feature, like Build or Proxy. That&amp;rsquo;s easy to do in 5 simple steps.
From the Administration Console, select the Server node (1), on the right panel click on the Remove Feature link (2), select the feature to un-configure (3), mark to enable the Remove button (4), finally press the Remove button (5).</description></item><item><title>Build workspace issue</title><link>http://blog.casavian.eu/2014/04/02/build-workspace-issue/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/04/02/build-workspace-issue/</guid><description>Some days ago, I got an email from a colleague about a build issue. Here is what she wrote me.
Hi Giulio,
After bringing back the build agents of ___, we’ve experienced below problem
I’ve mentioned you this problem before, we’ve experienced the same when started to use ____ for first time.
Only deleting the workspaces + physical folders fixed it.
I know that many Build Master and TFS Administrators have seen the Unable to create the workspace ___ due to a mapping conflict.</description></item><item><title>Integrating Linux builds in TFS</title><link>http://blog.casavian.eu/2014/02/13/integrating-linux-builds-in-tfs/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/02/13/integrating-linux-builds-in-tfs/</guid><description>Once upon a time I had to set-up a demo about integrating TFS build with Linux builds. As many knows there aren&amp;rsquo;t out-of-the-box solutions: currently there are no agents for Linux, so I had to make up something. The solution is composed by the following elements:
setup SSH on Linux write a Linux build script, saved in TFS version control modify the custom template using the Community Build Extensions adding these steps: a.</description></item><item><title>How I set-up this blog</title><link>http://blog.casavian.eu/2014/01/03/how-i-set-up-this-blog/</link><pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/01/03/how-i-set-up-this-blog/</guid><description>It is amazing how easy is setting up your own environment, nowadays.
I am trying new Technologies now and, knowing Azure, I was curious about Amazon. Well, it is more or less the same amount of work: create an account, choose from the Marketplace a VM configured with a blog engine and, voilà, you&amp;rsquo;re ready to go. Some will turn up their nose on my choice of Wordpress, but I considered how easy is to create and move the content.</description></item><item><title>My new job</title><link>http://blog.casavian.eu/2014/01/02/my-new-job/</link><pubDate>Thu, 02 Jan 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/01/02/my-new-job/</guid><description>Fourteen year at Microsoft and less than two months for switching to a new company I knew nothing before. Even if my job constantly brought me here and there, becoming an expat will be hard.
The job is also challenging: this time I am on the Operations side, not on the Development team&amp;hellip; but an ALM platform like TFS is, by its nature, in between.
I will try to embody the DevOps principles, smoothing and easing the company&amp;rsquo;s workstream: my experience tells it&amp;rsquo;s a matter of automating, but how you do it is important as well.</description></item><item><title>New year!</title><link>http://blog.casavian.eu/2014/01/01/new-year-2014/</link><pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate><guid>http://blog.casavian.eu/2014/01/01/new-year-2014/</guid><description>We have an old said “anno nuovo, vita nuova”, with the new year I have an important change in my life, so I have a new home for my blog. I quit Microsoft last year and I was pleasantly surprised by so many people reaching me. Some were amused by my goodbye email, and you, my dear reader, can also have fun.</description></item></channel></rss>